<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c>* This program fits circles into circular contour segments</c>
<c>* to extract their positions and radii</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* step: acquire image</c>
<c>* </c>
<l>read_image (Image, 'E:/Downloads/distance-In-Image-master/img/test_output1.png')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width * 1, Height * 1, 'light gray', WindowID)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_set_line_width (5)</l>
<l>dev_set_color ('white')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Image)</l>
<l>set_display_font (WindowID, 14, 'mono', 'true', 'false')</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c></c>
<c>* </c>
<c>* step: segment image into regions</c>
<c>* </c>
<l>dev_set_colored (12)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_draw ('fill')</l>
<l>fast_threshold (Image, Region, 200, 255, 20)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 70, 50000)</l>
<l>dev_display (Image)</l>
<l>dev_display (SelectedRegions)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* step: create ROI for contour processing</c>
<c>* </c>
<l>boundary (SelectedRegions, RegionBorder, 'inner_filled')</l>
<l>dilation_circle (RegionBorder, RegionDilation, 3.5)</l>
<l>union1 (RegionDilation, RegionUnion)</l>
<l>reduce_domain (Image, RegionUnion, ImageReduced)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageReduced)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c></c>
<c></c>
<l>edges_sub_pix (ImageReduced, Edges, 'canny', 1.5, 10, 40)</l>
<l>segment_contours_xld (Edges, ContoursSplit, 'lines_circles', 5, 2, 2)</l>
<l>select_contours_xld (ContoursSplit, SelectedContours, 'contour_length', 25, 99999, -0.5, 0.5)</l>
<l>count_obj (SelectedContours, NumberContours)</l>
<l>gen_empty_obj (Circles)</l>
<l>for i := 1 to NumberContours by 1</l>
<l>    select_obj (SelectedContours, ObjectSelected, i)</l>
<l>    get_contour_global_attrib_xld (ObjectSelected, 'cont_approx', Attrib)</l>
<l>    if (Attrib == 1)</l>
<l>        concat_obj (Circles, ObjectSelected, Circles)</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c></c>
<l>union_cocircular_contours_xld (Circles, UnionContours, rad(60), rad(10), rad(30), 100, 50, 10, 'true', 1)</l>
<l>dev_clear_window ()</l>
<l>dev_set_color ('black')</l>
<l>dev_display (UnionContours)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c></c>
<l>* edges_image(Image,Amp,Dir,'lanser2',0.5,'none',-1,-1)</l>
<l>hough_circle_trans (SelectedRegions, HoughCircles, 50)</l>
<l>dev_set_color ('red')</l>
<l>dev_display (SelectedRegions)</l>
<l>dev_display (HoughCircles)</l>
<l>stop ()</l>
<c></c>
<c></c>
<c></c>
<l>sort_contours_xld (UnionContours, UnionContours, 'upper_left', 'true', 'row')</l>
<l>smallest_circle_xld (UnionContours, Row_N, Column_N, Radius_N)</l>
<l>count_obj (UnionContours, Number)</l>
<l>dev_display (SelectedContours)</l>
<l>stop ()</l>
<c></c>
<l>for j := 1 to Number by 1</l>
<l>    select_obj (UnionContours, Hole, j)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (Hole)</l>
<c>    * Compute the minimal and maximal radius of the holes by computing the</c>
<c>    * distance of the midpoint to the contour</c>
<l>    distance_pc (Hole, Row_N[j - 1], Column_N[j - 1], DistanceMin, DistanceMax)</l>
<c>    * And visualize the results (minimal and maximal radius)</c>
<l>    disp_cross (WindowID, Row_N[j - 1], Column_N[j - 1], 6, 0)</l>
<l>    tuple_string (DistanceMin, '.3f', SVal)</l>
<l>    get_string_extents (WindowID, 'min: ' + SVal, Ascent, Descent, Width1, Height1)</l>
<l>    disp_message (WindowID, 'min: ' + SVal, 'image', Row_N[j - 1] - 2 * Ascent, Column_N[j - 1] - Radius_N[j - 1], 'black', 'true')</l>
<l>    disp_message (WindowID, 'max: ' + DistanceMax$'.3f', 'image', Row_N[j - 1], Column_N[j - 1] - Radius_N[j - 1], 'black', 'true')</l>
<l>    disp_continue_message (WindowID, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c></c>
<l>*edges_sub_pix (ImageReduced, Edges, 'canny', 4, 20, 40)</l>
<l>*select_shape_xld (Edges, Holes, 'circularity', 'and', 0.7, 1.0)</l>
<l>*sort_contours_xld (Holes, Holes, 'upper_left', 'true', 'row')</l>
<c>* Determine the midpoints</c>
<l>*smallest_circle_xld (Holes, Row, Column, Radius_N)</l>
<l>*count_obj (Holes, Number)</l>
<l>*stop()</l>
<c>* Max_Min_Radius</c>
<l>*dev_display (SelectedContours)</l>
<c>* For all boles ...</c>
<c></c>
<c></c>
<l>stop ()</l>
<c>* </c>
<l>dev_update_window ('on')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
